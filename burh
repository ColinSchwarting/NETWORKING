What is the Berkeley Packet Filter, using tcpdump, to capture all packets with a ttl of 64 and less, utilizing the IPv4 or IPv6 Headers? 
There should be 4880 packets.

sudo tcpdump 'ip[8]'<=64 || 'ip6[7]<=64'

what the hell is a socket, gunny?
at a minimum, it's a ip and port
  stream sockets
    connection oriented, tcp, handshake and teardown
  datagram sockets
    connectionless, udp, quick and easy
  raw sockets
    just fucking send it
    
 
user space sockets:
    --doesn't need elevated privs
    
kernel space sockets:
    --DOES need sudo 

user space applications/sockets
   tcpdump to read file
   nmap with no switches
   netcat connect to listener
   netcat to create listener above well know ports (1024+)
   using /dev/tcp or /dev/udp to transmit data

kernel space applications/sockets
  tcpdump/wireshark to capture packets
  nmap for os identification
  netcat to create listener (0-1023)
  scapy to craft packets
  python to craft/modify for transmission
  network devices using routing protocols
    
raw sockets
  must include ipheaders and the next headers
  avoids defense mechanisms
  sneaky squirel shit
  
  
NETWORK RECON
(
Active
or
Passive
)AND(
External
or
Internal
)

passive: possible tools
            whois (built in command or website)
                whois google.com
            DNS queries
                viewdns.info
            jobsite
                can create profiles on people based on public job listing
            phone numbers
                find personal info from phonenumber
            google searches
                can find info through google
            passive OS fingerprinting
                can determine what a system is based off of different factors such as ttl
            
           DIG:::
            can use dig to find infomation from a domain
                dig ccboe.net
                dig ccboe.net SOA
                              TXT
                              ANY
                dig -x 1.2.3.4 << reverse lookup
                             ^^^^^^^this can specify what youre looking for from the site



           wayback machine: scrapes webpages and saves them for future use
           
       NETWORK SCANNING LOCATIONS:
          aim
            wide range target scan
            target specific
          method 
            single source scan
            distributed
            
         types of scans
            broadcast and ping sweep
              for i in {1..254}; do ping -c 1 -W 1 10.1.1.$1 | grep 'from'; done
           ack/window
           rpc
           ftp
           decoy << send a scan from multiple IP address to obfuscate
           os fingerprinting
           version
           protocol
           discovery
           idle scan << sends scans through zombie hosts (the most stealthy)
      
     nmap scans
     sudo nmap -PN -T5 {ip ######}
     
     nc [options] [target ip] [target port] 
     man nc
     curl cht.sh/nc
     curl cht.sh/nmap
     https://usermanual.wiki/pdf/nmapquickreferenceguide.1045482188/view <<<<<<<------ SHOWS NMAP SCAN OPTIONS
     nmap 1.2.3.4/24 << nmap does know cidr notation
     ipaddr
     banner grabbing:  nc localhost 22 << can grab what the port is
     if you see a FTP or a webserver try a wget
     wget -r IP:PORT
      >> eom [thing you got from internet.png]
      
     if you see 6010, 6011, 6012: x11 forwarding

STEP BY STEP (SO FAR)
scan network:
  sudo nmap -T4 -p 1-1023 [IP/CIDR]
  ssh (probably tunnel) into device
      host enumeration:
          hostname
          show interfaces
          show arp?
  MAP where you are!!!
  MAP THE CONNECTING DEVICES
  if you see a webserver:
    wget -r IP:PORT
    eom [whatever you got]

---------------------------------------------------

DATA TRANSFER

TFTP: RFC 1350
  UDP Transport
  Small and simple comms
  
FTP: RFC 959
  TCP Transport
  Multiple TCP connections

SFTP: 
  TCP Transport (over SSH)
  Uses encryption
  
FTPS:
  Uses PKI authentication

wget -r ftp://[ip addy]
scp student@ip.add.ress.es:/home/userMyText.txt /MyLocal/directory
##through a tunnel
make a tunnel:
  ssh student@172.16.82.106 -L 1111:localhost:22 -NT
SCP through the tunnel:
  scp -P 1111 student@localhost:secretstuff.txt /home/student

NETCAT: Client to Listener File Transfer
Listener: nc -l -p 9001 < file.txt 
Client: nc 10.2.0.2 9001 > newfile.txt


NAMED PIPE
mknod mypipe p
nc 10.1.02.2 9002 0< mypipe | nc 10.2.0.2 9001 1> mypipe
nc -l -p 9002 < infile.txt
nc - l -p 9001 > outfile.txt

_-=-_-=-_-=-_-=-_-=-_-=-_-=-_-=-_
priv IP:
nc -lp [port 1]

connected device:
mkfifo PIPE
nc [private ip] [port 1] > PIPE | nc -lp [port 2] < PIPE

my device:
nc [public facing IP] [port 2]

--------------------------------
TUNNELING!!!!!!
openssh
ssh? ssh! it's used for tunneling, mostly secure
requires a server, must be installed and running
has a user, host, and session key
ssh port forwarding:
   allows for tunneling of other services through ssh
   provides insecure services encyrption
  ex: ssh -p <optional alt port> <user>@<pivot IP> -L <local bind port>:<target ip>:<tgt port> -NT
      ssh -L <local bind port>:<tgt IP>:<tgt port> -p <alt port> <user>@<pivot IP> -NT
      ssh student@173.16.82.106 -L 1111:localhost:80 -NT
      ssh -L 1111:localhost:80 student@172.16.82.106 -NT
      
      local port forwarding through a local port
        ssh student@172.16.1.15 -L 1111:172.16.40.10:22 -NT
        ssh student@localhost -p 1111 -L 2222:172.16.82.106:80 -NT
        firefox localhost:2222
        
     ssh dynamic port forwarding
        ssh -D <port> -p <alt port> <user>@<pivot ip> -NT
        proxychains default port is 9050
        creates a dynamic socks4 proxy 
        example:
          ssh student@172.16.82.106 -D 9050 -NT
          
          proxychains ./scan.sh
          proxychains ssh student@10.10.0.40
          
        dynamic prot forwarding 2-step:
          ssh student@172.16.82.106 -L 1111:10.10.0.40:22 -NT
          ssh student@localhost -D 9050 -p 1111 -NT
          proxychains curl ft[://www.onlineftp.ch
          proxychains wget
          proxychains [INTERNET RELATED STUFF IG]
          
     getting into a private host example:
        ssh [connected box on public side] -L [myRandomport]:[private host IP]:[22 or 80 or whatever im trying to do] -NT
       
       TO ACCESS THE TUNNEL: ssh -p 1234 localhost (or wherever I made the tunnel from)
     
     dynamic connection (after inital tunnel has been established) 
        ssh -p 1234 localhost -D 9050
        FROM INTERNET HOST
        proxychains nmap [private IP/cidr] -p 22 -PN << run as if the scan is being run on the private host 
                            
      ssh remote port forwarding: creates and port bind on the devices that im going to ssh on
          ex:
         Blue Host-01
            ssh student@10.10.0.40 -R 1111:localhost:80 -NT
            
        remote and local port forwarding (only use remote forwarding if you can't directly ssh into it):
         Private Host:
         ssh student@172.16.82.106 -R 1111:localhost:22 -NT
         
         Internet Host:
         ssh student@172.16.82.106 -L 2222:localhost:1111 -NT
         
         Internet Host: 
         ssh localhost -p 2222
        
    -----------------------------------------------------------------------------
    
    IH --> A --> B
    
    ssh A <-- make sure you can
    ssh B <-- make sure you can, else ssh A -L 2222:[Ip of B]:23
    ON THE B BOX
    ssh A -R [RHP]:localhost:22 < opens a random high port from the A box 
    ON THE IH
    ssh  A -L 1111:localhost:[THE SAME RHP]
    
    ssh localhost -p 1111
    --------------------------------------------------------------------------
   FILTERING:::::::::::
   https://git.cybbh.space/net/public/raw/master/modules/networking/slides/images/T1_Filtering_Devices_Mechanisms&Layer.jpg
   
   whitelist < deny any any < restricts more
   blacklist < allow any any
   implicit rules versus explicit rules < default rules versus written out rules
    network device operation modes << routed vs transparent
    
    intrusion defense systems
    intrusion prevention systems

    place the filters at the place closest to the origin of the traffic
    
    firewalls have rules
    if it's not routed, it's in transparent mode
    if it's directly connected, throw a IPS on it
    if it's off to the side, it uses an IDS
    IDS use signature
    if its a switch, connect an ACL/PACL/VACL
    if it's a host device, connect a host based firewall
    
   MAKE SURE YOU HAVE ALL RULES IN PLACE BEFORE THE DENY ANY ANY
   
  configure nftables:
    nft add table [family] [table]
   create the base chain
    nft add chain [family] [table] {type [type] hook [hook] priority [priortiy] \; policy [policy] \;}
   VIEW SLIDES FO MO DETAILS
   add rules in the chain
    nft add rule [family] [table] [chain] [matches (matches)] [statement]
   modify nftsables
    nft {list | flush} ruleset
    nft {delete | list | flush} table [family] [table]
    "                          " chain [family] [table] [chain]
    
   ------------------------------------------------------------------------------
   
   sudo iptables -L << default table to IPTables
   sudo iptables -t nat -L << shows NAT iptables
   sudo iptables -F << flushes only the filter table
   sudo iptables -t nat -F << flushes only the nat table
   sudo iptables -t mangle -L << look at the mangle table, this table changes who you look like for scans and shit
   sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT << for inbound traffic from tcp to port 22, accept traffic
    sudo iptables -A INPUT -p tcp --sport 22 -j ACCEPT
     sudo iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT
      sudo iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT

   sudo iptables -A INPUT -p tcp -m multiport --ports 6010,6011,6012 -j ACCEPT <<
   
   sudo iptables -A OUTPUT -p tcp -m multiport --ports 6010,6011,6012 -j ACCEPT <<
   sudo iptables -P OUTPUT DROP << set outbound default to drop
   sudo iptables -P INPUT DROP << set inbound default to drop
   
   sudo iptables -I INPUT -s 172.16.82.106 -j DROP  << insert a rule that drops traffic coming from 172.16.....
   sudo iptables -I INPUT -d 172.16.82.106 -j DROP  << insert a rule that drops traffc going to 172.16.....
   sudo iptables -L -n --line-numbers << lists rule numbers
   sudo iptables -D #rule number#
   sudo iptables -L -v << shows number of packets that are hit on each rule
   sudo iptables -A INPUT -m state --state INVALID -j DROP << drops all traffic marked as INVALID
   sudo iptables -A INPUT -i eth0 -p tcp --syn -m limit --limit 10/second -j ACCEPT << for packets coming in through eth0, drops all syn traffic that more than 10 per second (syn flood attacks and nmap scans) 
   SAVE IPTABLES 
    sudo iptabes-save > ipt.conf
   DONT FLUSH THEM WHILE THE DEFAULT RULE IS DROP
for CHAIN in INPUT FORWARD OUTPUT; do sudo iptables -P $CHAIN ACCEPT;done << turns all rules into accept
  sudo iptables -F << flushes iptables
  sudo iptables-restore ipt.conf -v << restores iptables from the save
   
   --=-=--=--=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-
   sudo apt-get install nftables << installs

   sudo nft list tables << lists the tables
   
   sudo nft add table ip COSC << adds a new table named COSC
   
   sudo nft flush table ip COSC << flushes any rules in the table
   
   sudo nft delete table ip COSC << deletes the table (no shit) 
   
   sudo nft add chain ip COSC input { type filter hook input priority 0 \; policy accept \; }
   
   sudo nft add chain ip COSC output { type filter hook output priority 0 \; policy accept \; }

   sudo nft list ruleset
   
   sudo nft insert rule ip COSC input tcp dport 22 accept  <<< these set all 22 inbound and outbound to accept
   sudo nft insert rule ip COSC input tcp sport 22 accept
   sudo nft insert rule ip COSC output tcp dport 22 accept
   sudo nft insert rule ip COSC output tcp sport 22 accept
   
   sudo nft list ruleset -ann

      sudo nft add chain ip COSC output { type filter hook output priority 0 \; policy drop \; }  
         sudo nft add chain ip COSC input { type filter hook output priority 0 \; policy drop \; } << now sets default policy to drop, SSH should still work
         
   sudo nft add rule ip COSC input ip saddr 172.16.82.112 drop << drops traffic from BLUEHOST-3
   sudo nft add rule ip COSC output ip daddr 172.16.82.112 drop << drops traffic to BLUEHOST-3
  
  sudo nft insert rule ip COSC input position 4 ip saddr 172.16.82.112 drop
  sudo nft insert rule ip COSC output position 7 ip daddr 172.16.82.112 drop << the position is the handle on the top, this will read this rule first
  sudo nft delete rule ip COSC output(or input) handle ##

 sudo nft list ruleset > nftables.rules << SAVES RULES
 
 sudo nft delete table ip COSC << deletes a table
 sudo nft -f nftables.rules  << restores the rules
 

   
   
   
   
   
